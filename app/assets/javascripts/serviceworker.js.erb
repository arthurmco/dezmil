//importScripts('https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js');

var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

function fetchRemoteRoutes(){
  return new Promise(function(fullfil, reject){
    fetch('/transactions/routes', {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    }).then(function(response){
      if (response.ok) {
        response.json().then(function(routes){
          fullfil(routes);
        });
      }
    }).catch(reject);
  });
}

function cacheRemoteRoutes(cache){
  return fetchRemoteRoutes().then(function(routes){
    return cache.addAll(routes);
  });
}

function cacheStatic(cache){
  var routes = [
    //'<%#= asset_path "application.js" %>',
    '<%= asset_path "application.css" %>',
    '/favicon.ico',
    '/offline',
  ];
  return cache.addAll(routes);
}

function onInstall(event) {
  //workbox && console.log('[Serviceworker] Workbox installed');

  event.waitUntil(
    caches.open(CACHE_NAME).then(cache => Promise.all([
      cacheStatic(cache),
      cacheRemoteRoutes(cache),
    ]))
  );
}

function onActivate(event) {
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

// Borrowed from https://github.com/TalAter/UpUp
function onFetch(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).catch(function() {
      // if it fails, try to return request from the cache
      var pathname = new URL(event.request.url).pathname;
      return caches.match(pathname).then(function(response) {
        if (response) {
          return response;
        }
        // if not found in cache, return default offline content for navigate requests
        if (event.request.mode === 'navigate' ||
          (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
          return caches.match('/offline');
        }
      }).catch(function(error){
        return caches.match('/offline');
      })
    })
  );
}

//self.addEventListener('install', onInstall);
//self.addEventListener('activate', onActivate);
//self.addEventListener('fetch', onFetch);
