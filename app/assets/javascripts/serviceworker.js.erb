var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
  self.skipWaiting();
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([

        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '<%#= asset_path "application.js" %>',

        '<%= asset_path "application.css" %>',
        '/transactions',
        '/offline.html',

      ]);
    })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(self.clients.claim());
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

const dofetch = async (event) => {
  console.log('Fetching', event.request.url);
  const cache = await caches.open(CACHE_NAME);
  const hit = await cache.match(event.request);
  if (hit) {
    console.log('Returning cache hit', hit);
    return hit;
  }
  const response = await cache.add(event.request);
  if (response) {
    console.log('Returning response from network', response);
    return response;
  }

  console.log('Returning offline error')
  console.log(event.request);
  return await cache.match('/offline.html');
}


function onFetch(event) {
  event.respondWith(dofetch(event));

  event.waitUntil(async () => {
    try {
      const cache = await caches.open(CACHE_NAME);
      try {
        return await cache.add(event.request)
      } catch (error) {
        if (!event.clientId) return;
        const client = await clients.get(event.clientId);
        if (!client) return;
        clients = await self.clients.matchAll()
        clients.forEach(client => {
          console.log('Sending offline status message to', client);
          client.postMessage({
            status: 'offline',
          })
        });
      }
    } catch (error) {
      console.error('Something went wrong', error);
      return Promise.reject(error);
    }
  });
}
self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
